// #include "./filtered_string_view.h"

// #include <catch2/catch.hpp>

// TEST_CASE("filter me if you can") {

//   for (char c = std::numeric_limits<char>::min(); c != std::numeric_limits<char>::max(); c++) {
//   assert(fsv::filtered_string_view::default_predicate(c));
//   }



//   //REQUIRE(false);
// }

// TEST_CASE("Test Default constructor") {

//   auto sv = fsv::filtered_string_view{};
//   std::cout << sv.size() << std::endl;


//   REQUIRE(sv.size() == 0);
// }


// TEST_CASE("Test implict string constructor") {

//   auto s = std::string{"cat"};
//   auto sv = fsv::filtered_string_view{s};
//   std::cout << sv.size() << std::endl;

//   REQUIRE(sv.size() == 3);
// }


// TEST_CASE("Test string constructor with predicate") {

//   auto s = std::string{"cat"};
//   auto pred = [](const char& c) { return c == 'a'; };
//   auto sv = fsv::filtered_string_view{s, pred};
//   std::cout << sv.size() << std::endl;


//   REQUIRE(sv.size() == 1);
// }


// TEST_CASE("Test Null-terminate implict string constructor") {

//   auto sv = fsv::filtered_string_view{"cat"};
//   std::cout << sv.size() << std::endl;

//   REQUIRE(sv.size() == 3);
// }


// TEST_CASE("Test null-terminate string constructor with predicate") {

//   auto pred = [](const char &c) { return c == 'a'; };
//   auto sv = fsv::filtered_string_view{"cat", pred};
//   std::cout << sv.size();


//   REQUIRE(sv.size() == 1);
// }

// TEST_CASE("Test copy and move constructor") {

//   auto sv1 = fsv::filtered_string_view{"bulldog"};
//   const auto copy = sv1;

//   assert(copy.data() == sv1.data()); // pointers compare equal.

//   const auto move = std::move(sv1);
//   std::cout<<move.data()<<std::endl;
//   assert(sv1.data() == nullptr); // true: sv1's guts were moved into `move`


// }

